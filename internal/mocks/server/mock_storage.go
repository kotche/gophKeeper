// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/storage/repository.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/kotche/gophKeeper/internal/server/domain"
)

// MockIVersionRepo is a mock of IVersionRepo interface.
type MockIVersionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIVersionRepoMockRecorder
}

// MockIVersionRepoMockRecorder is the mock recorder for MockIVersionRepo.
type MockIVersionRepoMockRecorder struct {
	mock *MockIVersionRepo
}

// NewMockIVersionRepo creates a new mock instance.
func NewMockIVersionRepo(ctrl *gomock.Controller) *MockIVersionRepo {
	mock := &MockIVersionRepo{ctrl: ctrl}
	mock.recorder = &MockIVersionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVersionRepo) EXPECT() *MockIVersionRepoMockRecorder {
	return m.recorder
}

// GetVersion mocks base method.
func (m *MockIVersionRepo) GetVersion(ctx context.Context, userID int) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", ctx, userID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockIVersionRepoMockRecorder) GetVersion(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockIVersionRepo)(nil).GetVersion), ctx, userID)
}

// InsertVersion mocks base method.
func (m *MockIVersionRepo) InsertVersion(ctx context.Context, userID int, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVersion", ctx, userID, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertVersion indicates an expected call of InsertVersion.
func (mr *MockIVersionRepoMockRecorder) InsertVersion(ctx, userID, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVersion", reflect.TypeOf((*MockIVersionRepo)(nil).InsertVersion), ctx, userID, tx)
}

// UpdateVersion mocks base method.
func (m *MockIVersionRepo) UpdateVersion(ctx context.Context, userID int, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVersion", ctx, userID, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVersion indicates an expected call of UpdateVersion.
func (mr *MockIVersionRepoMockRecorder) UpdateVersion(ctx, userID, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVersion", reflect.TypeOf((*MockIVersionRepo)(nil).UpdateVersion), ctx, userID, tx)
}

// MockIAuthRepo is a mock of IAuthRepo interface.
type MockIAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthRepoMockRecorder
}

// MockIAuthRepoMockRecorder is the mock recorder for MockIAuthRepo.
type MockIAuthRepoMockRecorder struct {
	mock *MockIAuthRepo
}

// NewMockIAuthRepo creates a new mock instance.
func NewMockIAuthRepo(ctrl *gomock.Controller) *MockIAuthRepo {
	mock := &MockIAuthRepo{ctrl: ctrl}
	mock.recorder = &MockIAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthRepo) EXPECT() *MockIAuthRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIAuthRepo) CreateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIAuthRepoMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIAuthRepo)(nil).CreateUser), ctx, user)
}

// GetUserID mocks base method.
func (m *MockIAuthRepo) GetUserID(ctx context.Context, user *domain.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockIAuthRepoMockRecorder) GetUserID(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockIAuthRepo)(nil).GetUserID), ctx, user)
}

// MockILoginPassRepo is a mock of ILoginPassRepo interface.
type MockILoginPassRepo struct {
	ctrl     *gomock.Controller
	recorder *MockILoginPassRepoMockRecorder
}

// MockILoginPassRepoMockRecorder is the mock recorder for MockILoginPassRepo.
type MockILoginPassRepoMockRecorder struct {
	mock *MockILoginPassRepo
}

// NewMockILoginPassRepo creates a new mock instance.
func NewMockILoginPassRepo(ctrl *gomock.Controller) *MockILoginPassRepo {
	mock := &MockILoginPassRepo{ctrl: ctrl}
	mock.recorder = &MockILoginPassRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILoginPassRepo) EXPECT() *MockILoginPassRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockILoginPassRepo) Create(ctx context.Context, lp *domain.LoginPass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, lp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockILoginPassRepoMockRecorder) Create(ctx, lp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockILoginPassRepo)(nil).Create), ctx, lp)
}

// Delete mocks base method.
func (m *MockILoginPassRepo) Delete(ctx context.Context, lp *domain.LoginPass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, lp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockILoginPassRepoMockRecorder) Delete(ctx, lp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockILoginPassRepo)(nil).Delete), ctx, lp)
}

// GetAll mocks base method.
func (m *MockILoginPassRepo) GetAll(ctx context.Context, userID int) ([]domain.LoginPass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID)
	ret0, _ := ret[0].([]domain.LoginPass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockILoginPassRepoMockRecorder) GetAll(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockILoginPassRepo)(nil).GetAll), ctx, userID)
}

// Update mocks base method.
func (m *MockILoginPassRepo) Update(ctx context.Context, lp *domain.LoginPass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, lp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockILoginPassRepoMockRecorder) Update(ctx, lp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockILoginPassRepo)(nil).Update), ctx, lp)
}

// MockITextRepo is a mock of ITextRepo interface.
type MockITextRepo struct {
	ctrl     *gomock.Controller
	recorder *MockITextRepoMockRecorder
}

// MockITextRepoMockRecorder is the mock recorder for MockITextRepo.
type MockITextRepoMockRecorder struct {
	mock *MockITextRepo
}

// NewMockITextRepo creates a new mock instance.
func NewMockITextRepo(ctrl *gomock.Controller) *MockITextRepo {
	mock := &MockITextRepo{ctrl: ctrl}
	mock.recorder = &MockITextRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITextRepo) EXPECT() *MockITextRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITextRepo) Create(ctx context.Context, text *domain.Text) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockITextRepoMockRecorder) Create(ctx, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITextRepo)(nil).Create), ctx, text)
}

// Delete mocks base method.
func (m *MockITextRepo) Delete(ctx context.Context, text *domain.Text) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITextRepoMockRecorder) Delete(ctx, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITextRepo)(nil).Delete), ctx, text)
}

// GetAll mocks base method.
func (m *MockITextRepo) GetAll(ctx context.Context, userID int) ([]domain.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID)
	ret0, _ := ret[0].([]domain.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockITextRepoMockRecorder) GetAll(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockITextRepo)(nil).GetAll), ctx, userID)
}

// Update mocks base method.
func (m *MockITextRepo) Update(ctx context.Context, text *domain.Text) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockITextRepoMockRecorder) Update(ctx, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITextRepo)(nil).Update), ctx, text)
}

// MockIBinaryRepo is a mock of IBinaryRepo interface.
type MockIBinaryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIBinaryRepoMockRecorder
}

// MockIBinaryRepoMockRecorder is the mock recorder for MockIBinaryRepo.
type MockIBinaryRepoMockRecorder struct {
	mock *MockIBinaryRepo
}

// NewMockIBinaryRepo creates a new mock instance.
func NewMockIBinaryRepo(ctrl *gomock.Controller) *MockIBinaryRepo {
	mock := &MockIBinaryRepo{ctrl: ctrl}
	mock.recorder = &MockIBinaryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBinaryRepo) EXPECT() *MockIBinaryRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIBinaryRepo) Create(ctx context.Context, text *domain.Binary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIBinaryRepoMockRecorder) Create(ctx, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBinaryRepo)(nil).Create), ctx, text)
}

// Delete mocks base method.
func (m *MockIBinaryRepo) Delete(ctx context.Context, text *domain.Binary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIBinaryRepoMockRecorder) Delete(ctx, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIBinaryRepo)(nil).Delete), ctx, text)
}

// GetAll mocks base method.
func (m *MockIBinaryRepo) GetAll(ctx context.Context, userID int) ([]domain.Binary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID)
	ret0, _ := ret[0].([]domain.Binary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIBinaryRepoMockRecorder) GetAll(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIBinaryRepo)(nil).GetAll), ctx, userID)
}

// Update mocks base method.
func (m *MockIBinaryRepo) Update(ctx context.Context, text *domain.Binary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIBinaryRepoMockRecorder) Update(ctx, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIBinaryRepo)(nil).Update), ctx, text)
}

// MockIBankCardRepo is a mock of IBankCardRepo interface.
type MockIBankCardRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIBankCardRepoMockRecorder
}

// MockIBankCardRepoMockRecorder is the mock recorder for MockIBankCardRepo.
type MockIBankCardRepoMockRecorder struct {
	mock *MockIBankCardRepo
}

// NewMockIBankCardRepo creates a new mock instance.
func NewMockIBankCardRepo(ctrl *gomock.Controller) *MockIBankCardRepo {
	mock := &MockIBankCardRepo{ctrl: ctrl}
	mock.recorder = &MockIBankCardRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBankCardRepo) EXPECT() *MockIBankCardRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIBankCardRepo) Create(ctx context.Context, text *domain.BankCard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIBankCardRepoMockRecorder) Create(ctx, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBankCardRepo)(nil).Create), ctx, text)
}

// Delete mocks base method.
func (m *MockIBankCardRepo) Delete(ctx context.Context, text *domain.BankCard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIBankCardRepoMockRecorder) Delete(ctx, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIBankCardRepo)(nil).Delete), ctx, text)
}

// GetAll mocks base method.
func (m *MockIBankCardRepo) GetAll(ctx context.Context, userID int) ([]domain.BankCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID)
	ret0, _ := ret[0].([]domain.BankCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIBankCardRepoMockRecorder) GetAll(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIBankCardRepo)(nil).GetAll), ctx, userID)
}

// Update mocks base method.
func (m *MockIBankCardRepo) Update(ctx context.Context, text *domain.BankCard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIBankCardRepoMockRecorder) Update(ctx, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIBankCardRepo)(nil).Update), ctx, text)
}
