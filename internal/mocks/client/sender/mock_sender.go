// Code generated by MockGen. DO NOT EDIT.
// Source: internal/client/transport/commander.go

// Package mock_transport is a generated GoMock package.
package mock_transport

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/kotche/gophKeeper/internal/client/domain"
)

// MockISender is a mock of ISender interface.
type MockISender struct {
	ctrl     *gomock.Controller
	recorder *MockISenderMockRecorder
}

// MockISenderMockRecorder is the mock recorder for MockISender.
type MockISenderMockRecorder struct {
	mock *MockISender
}

// NewMockISender creates a new mock instance.
func NewMockISender(ctrl *gomock.Controller) *MockISender {
	mock := &MockISender{ctrl: ctrl}
	mock.recorder = &MockISenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISender) EXPECT() *MockISenderMockRecorder {
	return m.recorder
}

// Authentication mocks base method.
func (m *MockISender) Authentication(login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authentication", login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authentication indicates an expected call of Authentication.
func (mr *MockISenderMockRecorder) Authentication(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authentication", reflect.TypeOf((*MockISender)(nil).Authentication), login, password)
}

// CreateBankCard mocks base method.
func (m *MockISender) CreateBankCard(number, meta string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBankCard", number, meta)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBankCard indicates an expected call of CreateBankCard.
func (mr *MockISenderMockRecorder) CreateBankCard(number, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBankCard", reflect.TypeOf((*MockISender)(nil).CreateBankCard), number, meta)
}

// CreateBinary mocks base method.
func (m *MockISender) CreateBinary(binary, meta string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBinary", binary, meta)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBinary indicates an expected call of CreateBinary.
func (mr *MockISenderMockRecorder) CreateBinary(binary, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBinary", reflect.TypeOf((*MockISender)(nil).CreateBinary), binary, meta)
}

// CreateLoginPass mocks base method.
func (m *MockISender) CreateLoginPass(login, password, meta string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoginPass", login, password, meta)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoginPass indicates an expected call of CreateLoginPass.
func (mr *MockISenderMockRecorder) CreateLoginPass(login, password, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoginPass", reflect.TypeOf((*MockISender)(nil).CreateLoginPass), login, password, meta)
}

// CreateText mocks base method.
func (m *MockISender) CreateText(text, meta string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateText", text, meta)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateText indicates an expected call of CreateText.
func (mr *MockISenderMockRecorder) CreateText(text, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateText", reflect.TypeOf((*MockISender)(nil).CreateText), text, meta)
}

// DeleteBankCard mocks base method.
func (m *MockISender) DeleteBankCard(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBankCard", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBankCard indicates an expected call of DeleteBankCard.
func (mr *MockISenderMockRecorder) DeleteBankCard(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBankCard", reflect.TypeOf((*MockISender)(nil).DeleteBankCard), id)
}

// DeleteBinary mocks base method.
func (m *MockISender) DeleteBinary(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBinary", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBinary indicates an expected call of DeleteBinary.
func (mr *MockISenderMockRecorder) DeleteBinary(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBinary", reflect.TypeOf((*MockISender)(nil).DeleteBinary), id)
}

// DeleteLoginPass mocks base method.
func (m *MockISender) DeleteLoginPass(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoginPass", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoginPass indicates an expected call of DeleteLoginPass.
func (mr *MockISenderMockRecorder) DeleteLoginPass(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoginPass", reflect.TypeOf((*MockISender)(nil).DeleteLoginPass), id)
}

// DeleteText mocks base method.
func (m *MockISender) DeleteText(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteText", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteText indicates an expected call of DeleteText.
func (mr *MockISenderMockRecorder) DeleteText(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteText", reflect.TypeOf((*MockISender)(nil).DeleteText), id)
}

// Login mocks base method.
func (m *MockISender) Login(username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockISenderMockRecorder) Login(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockISender)(nil).Login), username, password)
}

// ReadBankCardCache mocks base method.
func (m *MockISender) ReadBankCardCache() ([]*domain.BankCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBankCardCache")
	ret0, _ := ret[0].([]*domain.BankCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBankCardCache indicates an expected call of ReadBankCardCache.
func (mr *MockISenderMockRecorder) ReadBankCardCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBankCardCache", reflect.TypeOf((*MockISender)(nil).ReadBankCardCache))
}

// ReadBinaryCache mocks base method.
func (m *MockISender) ReadBinaryCache() ([]*domain.Binary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBinaryCache")
	ret0, _ := ret[0].([]*domain.Binary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBinaryCache indicates an expected call of ReadBinaryCache.
func (mr *MockISenderMockRecorder) ReadBinaryCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBinaryCache", reflect.TypeOf((*MockISender)(nil).ReadBinaryCache))
}

// ReadLoginPassCache mocks base method.
func (m *MockISender) ReadLoginPassCache() ([]*domain.LoginPass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLoginPassCache")
	ret0, _ := ret[0].([]*domain.LoginPass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLoginPassCache indicates an expected call of ReadLoginPassCache.
func (mr *MockISenderMockRecorder) ReadLoginPassCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLoginPassCache", reflect.TypeOf((*MockISender)(nil).ReadLoginPassCache))
}

// ReadTextCache mocks base method.
func (m *MockISender) ReadTextCache() ([]*domain.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTextCache")
	ret0, _ := ret[0].([]*domain.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTextCache indicates an expected call of ReadTextCache.
func (mr *MockISenderMockRecorder) ReadTextCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTextCache", reflect.TypeOf((*MockISender)(nil).ReadTextCache))
}

// UpdateBankCard mocks base method.
func (m *MockISender) UpdateBankCard(id int, number, meta string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBankCard", id, number, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBankCard indicates an expected call of UpdateBankCard.
func (mr *MockISenderMockRecorder) UpdateBankCard(id, number, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBankCard", reflect.TypeOf((*MockISender)(nil).UpdateBankCard), id, number, meta)
}

// UpdateBinary mocks base method.
func (m *MockISender) UpdateBinary(id int, binary, meta string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBinary", id, binary, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBinary indicates an expected call of UpdateBinary.
func (mr *MockISenderMockRecorder) UpdateBinary(id, binary, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBinary", reflect.TypeOf((*MockISender)(nil).UpdateBinary), id, binary, meta)
}

// UpdateLoginPass mocks base method.
func (m *MockISender) UpdateLoginPass(id int, login, password, meta string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoginPass", id, login, password, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoginPass indicates an expected call of UpdateLoginPass.
func (mr *MockISenderMockRecorder) UpdateLoginPass(id, login, password, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoginPass", reflect.TypeOf((*MockISender)(nil).UpdateLoginPass), id, login, password, meta)
}

// UpdateText mocks base method.
func (m *MockISender) UpdateText(id int, text, meta string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateText", id, text, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateText indicates an expected call of UpdateText.
func (mr *MockISenderMockRecorder) UpdateText(id, text, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateText", reflect.TypeOf((*MockISender)(nil).UpdateText), id, text, meta)
}
