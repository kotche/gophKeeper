// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/proto/binary.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BinaryServiceClient is the client API for BinaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinaryServiceClient interface {
	CreateBinary(ctx context.Context, in *BinaryRequest, opts ...grpc.CallOption) (*BinaryResponse, error)
	UpdateBinary(ctx context.Context, in *BinaryUpdateRequest, opts ...grpc.CallOption) (*BinaryUpdateResponse, error)
	DeleteBinary(ctx context.Context, in *BinaryDeleteRequest, opts ...grpc.CallOption) (*BinaryDeleteResponse, error)
	GetAllBinary(ctx context.Context, in *BinaryGetAllRequest, opts ...grpc.CallOption) (*BinaryGetAllResponse, error)
}

type binaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryServiceClient(cc grpc.ClientConnInterface) BinaryServiceClient {
	return &binaryServiceClient{cc}
}

func (c *binaryServiceClient) CreateBinary(ctx context.Context, in *BinaryRequest, opts ...grpc.CallOption) (*BinaryResponse, error) {
	out := new(BinaryResponse)
	err := c.cc.Invoke(ctx, "/keeper.BinaryService/CreateBinary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryServiceClient) UpdateBinary(ctx context.Context, in *BinaryUpdateRequest, opts ...grpc.CallOption) (*BinaryUpdateResponse, error) {
	out := new(BinaryUpdateResponse)
	err := c.cc.Invoke(ctx, "/keeper.BinaryService/UpdateBinary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryServiceClient) DeleteBinary(ctx context.Context, in *BinaryDeleteRequest, opts ...grpc.CallOption) (*BinaryDeleteResponse, error) {
	out := new(BinaryDeleteResponse)
	err := c.cc.Invoke(ctx, "/keeper.BinaryService/DeleteBinary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryServiceClient) GetAllBinary(ctx context.Context, in *BinaryGetAllRequest, opts ...grpc.CallOption) (*BinaryGetAllResponse, error) {
	out := new(BinaryGetAllResponse)
	err := c.cc.Invoke(ctx, "/keeper.BinaryService/GetAllBinary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinaryServiceServer is the server API for BinaryService service.
// All implementations must embed UnimplementedBinaryServiceServer
// for forward compatibility
type BinaryServiceServer interface {
	CreateBinary(context.Context, *BinaryRequest) (*BinaryResponse, error)
	UpdateBinary(context.Context, *BinaryUpdateRequest) (*BinaryUpdateResponse, error)
	DeleteBinary(context.Context, *BinaryDeleteRequest) (*BinaryDeleteResponse, error)
	GetAllBinary(context.Context, *BinaryGetAllRequest) (*BinaryGetAllResponse, error)
	mustEmbedUnimplementedBinaryServiceServer()
}

// UnimplementedBinaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBinaryServiceServer struct {
}

func (UnimplementedBinaryServiceServer) CreateBinary(context.Context, *BinaryRequest) (*BinaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBinary not implemented")
}
func (UnimplementedBinaryServiceServer) UpdateBinary(context.Context, *BinaryUpdateRequest) (*BinaryUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBinary not implemented")
}
func (UnimplementedBinaryServiceServer) DeleteBinary(context.Context, *BinaryDeleteRequest) (*BinaryDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinary not implemented")
}
func (UnimplementedBinaryServiceServer) GetAllBinary(context.Context, *BinaryGetAllRequest) (*BinaryGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBinary not implemented")
}
func (UnimplementedBinaryServiceServer) mustEmbedUnimplementedBinaryServiceServer() {}

// UnsafeBinaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryServiceServer will
// result in compilation errors.
type UnsafeBinaryServiceServer interface {
	mustEmbedUnimplementedBinaryServiceServer()
}

func RegisterBinaryServiceServer(s grpc.ServiceRegistrar, srv BinaryServiceServer) {
	s.RegisterService(&BinaryService_ServiceDesc, srv)
}

func _BinaryService_CreateBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryServiceServer).CreateBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.BinaryService/CreateBinary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryServiceServer).CreateBinary(ctx, req.(*BinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryService_UpdateBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryServiceServer).UpdateBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.BinaryService/UpdateBinary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryServiceServer).UpdateBinary(ctx, req.(*BinaryUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryService_DeleteBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryServiceServer).DeleteBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.BinaryService/DeleteBinary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryServiceServer).DeleteBinary(ctx, req.(*BinaryDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryService_GetAllBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryServiceServer).GetAllBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.BinaryService/GetAllBinary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryServiceServer).GetAllBinary(ctx, req.(*BinaryGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BinaryService_ServiceDesc is the grpc.ServiceDesc for BinaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keeper.BinaryService",
	HandlerType: (*BinaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBinary",
			Handler:    _BinaryService_CreateBinary_Handler,
		},
		{
			MethodName: "UpdateBinary",
			Handler:    _BinaryService_UpdateBinary_Handler,
		},
		{
			MethodName: "DeleteBinary",
			Handler:    _BinaryService_DeleteBinary_Handler,
		},
		{
			MethodName: "GetAllBinary",
			Handler:    _BinaryService_GetAllBinary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/binary.proto",
}
