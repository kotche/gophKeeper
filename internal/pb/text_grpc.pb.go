// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/proto/text.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TextServiceClient is the client API for TextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextServiceClient interface {
	CreateText(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextResponse, error)
	UpdateText(ctx context.Context, in *TextUpdateRequest, opts ...grpc.CallOption) (*TextUpdateResponse, error)
	DeleteText(ctx context.Context, in *TextDeleteRequest, opts ...grpc.CallOption) (*TextDeleteResponse, error)
	GetAllText(ctx context.Context, in *TextGetAllRequest, opts ...grpc.CallOption) (*TextGetAllResponse, error)
}

type textServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextServiceClient(cc grpc.ClientConnInterface) TextServiceClient {
	return &textServiceClient{cc}
}

func (c *textServiceClient) CreateText(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, "/keeper.TextService/CreateText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textServiceClient) UpdateText(ctx context.Context, in *TextUpdateRequest, opts ...grpc.CallOption) (*TextUpdateResponse, error) {
	out := new(TextUpdateResponse)
	err := c.cc.Invoke(ctx, "/keeper.TextService/UpdateText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textServiceClient) DeleteText(ctx context.Context, in *TextDeleteRequest, opts ...grpc.CallOption) (*TextDeleteResponse, error) {
	out := new(TextDeleteResponse)
	err := c.cc.Invoke(ctx, "/keeper.TextService/DeleteText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textServiceClient) GetAllText(ctx context.Context, in *TextGetAllRequest, opts ...grpc.CallOption) (*TextGetAllResponse, error) {
	out := new(TextGetAllResponse)
	err := c.cc.Invoke(ctx, "/keeper.TextService/GetAllText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextServiceServer is the server API for TextService service.
// All implementations must embed UnimplementedTextServiceServer
// for forward compatibility
type TextServiceServer interface {
	CreateText(context.Context, *TextRequest) (*TextResponse, error)
	UpdateText(context.Context, *TextUpdateRequest) (*TextUpdateResponse, error)
	DeleteText(context.Context, *TextDeleteRequest) (*TextDeleteResponse, error)
	GetAllText(context.Context, *TextGetAllRequest) (*TextGetAllResponse, error)
	mustEmbedUnimplementedTextServiceServer()
}

// UnimplementedTextServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTextServiceServer struct {
}

func (UnimplementedTextServiceServer) CreateText(context.Context, *TextRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateText not implemented")
}
func (UnimplementedTextServiceServer) UpdateText(context.Context, *TextUpdateRequest) (*TextUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateText not implemented")
}
func (UnimplementedTextServiceServer) DeleteText(context.Context, *TextDeleteRequest) (*TextDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteText not implemented")
}
func (UnimplementedTextServiceServer) GetAllText(context.Context, *TextGetAllRequest) (*TextGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllText not implemented")
}
func (UnimplementedTextServiceServer) mustEmbedUnimplementedTextServiceServer() {}

// UnsafeTextServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextServiceServer will
// result in compilation errors.
type UnsafeTextServiceServer interface {
	mustEmbedUnimplementedTextServiceServer()
}

func RegisterTextServiceServer(s grpc.ServiceRegistrar, srv TextServiceServer) {
	s.RegisterService(&TextService_ServiceDesc, srv)
}

func _TextService_CreateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextServiceServer).CreateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.TextService/CreateText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextServiceServer).CreateText(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextService_UpdateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextServiceServer).UpdateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.TextService/UpdateText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextServiceServer).UpdateText(ctx, req.(*TextUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextService_DeleteText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextServiceServer).DeleteText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.TextService/DeleteText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextServiceServer).DeleteText(ctx, req.(*TextDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextService_GetAllText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextServiceServer).GetAllText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.TextService/GetAllText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextServiceServer).GetAllText(ctx, req.(*TextGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextService_ServiceDesc is the grpc.ServiceDesc for TextService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keeper.TextService",
	HandlerType: (*TextServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateText",
			Handler:    _TextService_CreateText_Handler,
		},
		{
			MethodName: "UpdateText",
			Handler:    _TextService_UpdateText_Handler,
		},
		{
			MethodName: "DeleteText",
			Handler:    _TextService_DeleteText_Handler,
		},
		{
			MethodName: "GetAllText",
			Handler:    _TextService_GetAllText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/text.proto",
}
