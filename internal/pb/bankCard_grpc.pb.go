// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/proto/bankCard.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BankCardServiceClient is the client API for BankCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankCardServiceClient interface {
	CreateBankCard(ctx context.Context, in *BankCardRequest, opts ...grpc.CallOption) (*BankCardResponse, error)
	UpdateBankCard(ctx context.Context, in *BankCardUpdateRequest, opts ...grpc.CallOption) (*BankCardUpdateResponse, error)
	DeleteBankCard(ctx context.Context, in *BankCardDeleteRequest, opts ...grpc.CallOption) (*BankCardDeleteResponse, error)
	GetAllBankCard(ctx context.Context, in *BankCardGetAllRequest, opts ...grpc.CallOption) (*BankCardGetAllResponse, error)
}

type bankCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankCardServiceClient(cc grpc.ClientConnInterface) BankCardServiceClient {
	return &bankCardServiceClient{cc}
}

func (c *bankCardServiceClient) CreateBankCard(ctx context.Context, in *BankCardRequest, opts ...grpc.CallOption) (*BankCardResponse, error) {
	out := new(BankCardResponse)
	err := c.cc.Invoke(ctx, "/keeper.BankCardService/CreateBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankCardServiceClient) UpdateBankCard(ctx context.Context, in *BankCardUpdateRequest, opts ...grpc.CallOption) (*BankCardUpdateResponse, error) {
	out := new(BankCardUpdateResponse)
	err := c.cc.Invoke(ctx, "/keeper.BankCardService/UpdateBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankCardServiceClient) DeleteBankCard(ctx context.Context, in *BankCardDeleteRequest, opts ...grpc.CallOption) (*BankCardDeleteResponse, error) {
	out := new(BankCardDeleteResponse)
	err := c.cc.Invoke(ctx, "/keeper.BankCardService/DeleteBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankCardServiceClient) GetAllBankCard(ctx context.Context, in *BankCardGetAllRequest, opts ...grpc.CallOption) (*BankCardGetAllResponse, error) {
	out := new(BankCardGetAllResponse)
	err := c.cc.Invoke(ctx, "/keeper.BankCardService/GetAllBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankCardServiceServer is the server API for BankCardService service.
// All implementations must embed UnimplementedBankCardServiceServer
// for forward compatibility
type BankCardServiceServer interface {
	CreateBankCard(context.Context, *BankCardRequest) (*BankCardResponse, error)
	UpdateBankCard(context.Context, *BankCardUpdateRequest) (*BankCardUpdateResponse, error)
	DeleteBankCard(context.Context, *BankCardDeleteRequest) (*BankCardDeleteResponse, error)
	GetAllBankCard(context.Context, *BankCardGetAllRequest) (*BankCardGetAllResponse, error)
	mustEmbedUnimplementedBankCardServiceServer()
}

// UnimplementedBankCardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBankCardServiceServer struct {
}

func (UnimplementedBankCardServiceServer) CreateBankCard(context.Context, *BankCardRequest) (*BankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankCard not implemented")
}
func (UnimplementedBankCardServiceServer) UpdateBankCard(context.Context, *BankCardUpdateRequest) (*BankCardUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankCard not implemented")
}
func (UnimplementedBankCardServiceServer) DeleteBankCard(context.Context, *BankCardDeleteRequest) (*BankCardDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBankCard not implemented")
}
func (UnimplementedBankCardServiceServer) GetAllBankCard(context.Context, *BankCardGetAllRequest) (*BankCardGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBankCard not implemented")
}
func (UnimplementedBankCardServiceServer) mustEmbedUnimplementedBankCardServiceServer() {}

// UnsafeBankCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankCardServiceServer will
// result in compilation errors.
type UnsafeBankCardServiceServer interface {
	mustEmbedUnimplementedBankCardServiceServer()
}

func RegisterBankCardServiceServer(s grpc.ServiceRegistrar, srv BankCardServiceServer) {
	s.RegisterService(&BankCardService_ServiceDesc, srv)
}

func _BankCardService_CreateBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServiceServer).CreateBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.BankCardService/CreateBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServiceServer).CreateBankCard(ctx, req.(*BankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankCardService_UpdateBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServiceServer).UpdateBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.BankCardService/UpdateBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServiceServer).UpdateBankCard(ctx, req.(*BankCardUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankCardService_DeleteBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServiceServer).DeleteBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.BankCardService/DeleteBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServiceServer).DeleteBankCard(ctx, req.(*BankCardDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankCardService_GetAllBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServiceServer).GetAllBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.BankCardService/GetAllBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServiceServer).GetAllBankCard(ctx, req.(*BankCardGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankCardService_ServiceDesc is the grpc.ServiceDesc for BankCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keeper.BankCardService",
	HandlerType: (*BankCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBankCard",
			Handler:    _BankCardService_CreateBankCard_Handler,
		},
		{
			MethodName: "UpdateBankCard",
			Handler:    _BankCardService_UpdateBankCard_Handler,
		},
		{
			MethodName: "DeleteBankCard",
			Handler:    _BankCardService_DeleteBankCard_Handler,
		},
		{
			MethodName: "GetAllBankCard",
			Handler:    _BankCardService_GetAllBankCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/bankCard.proto",
}
